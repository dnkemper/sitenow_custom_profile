<?php

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function sitenow_install() {
  // Enable default themes.
  $default_theme = variable_get('theme_default', 'bartik');
  $admin_theme = 'seven';
  
  // Enable some standard blocks.
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
	array(
      'module' => 'node',
      'delta' => 'recent',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'new',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'search',
      'delta' => 'form',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => -10,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'article',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);

  // Create a default vocabulary named "Tags", enabled for the 'article' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $help = st('Enter a comma-separated list of words to describe your content.');
  $vocabulary = (object) array(
    'name' => st('Tags'),
    'description' => $description,
    'machine_name' => 'tags',
    'help' => $help,

  );
  taxonomy_vocabulary_save($vocabulary);

  $field = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => 'Tags',
    'bundle' => 'article',
    'description' => $vocabulary->help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);


  // Create an image field named "Image", enabled for the 'article' content type.
  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);


  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'node',
    'label' => 'Image',
    'bundle' => 'article',
    'description' => st('Upload an image to go with this article.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),

    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'large', 'image_link' => ''),
        'weight' => -1,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
        'weight' => -1,
      ),
    ),
  );
  field_create_instance($instance);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  $full_html_permission = filter_permission_name($full_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $filtered_html_permission));
  
  // Create editor and webmaster roles
    $new_roles = array('editor', 'webmaster');
    foreach ($new_roles as $r){
      if(!user_role_load_by_name($r)){
        $role = new stdClass();
        $role->name = $r;
        user_role_save($role);
      }
    }
	
	$editor_role_id = 3;
	$webmaster_role_id = 4;
	
	user_role_grant_permissions($editor_role_id, array('administer menu','administer nodes','access content overview','view own unpublished content',
													   'create article content','edit own article content','edit any article content','delete own article content','delete any article content',
													   'create page content','edit own page content','edit any page content','delete own page content','delete any page content',
													   'access overlay','view the administration theme','access site reports','access toolbar','change own username',$filtered_html_permission));
    user_role_grant_permissions($webmaster_role_id, array('administer blocks','access dashboard','manage features','administer image styles','administer menu','bypass node access',
														  'administer content types',$filtered_html_permission,$full_html_permission));
	
  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 4;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
	
  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');

    
  $full_html_settings = array(
    'default' => 1,
    // 'user_choose' => 1,
    'show_toggle' => 1,
    // 'theme' => 'advanced',
    'language' => 'en',
    'buttons' => array(
      'default' => array(
        'Bold' => 1,
        'Italic' => 1,
        'Underline' => 1,
     //   'Strike' => 1,
        'JustifyLeft' => 1,
        'JustifyCenter' => 1,
        'JustifyRight' => 1,
	 //   'JustifyBlock' => 1,
        'BulletedList' => 1,
        'NumberedList' => 1,
	    'Outdent' => 1,
	    'Indent' => 1,
        'Undo' => 1,
        'Redo' => 1,
        'Link' => 1,
        'Unlink' => 1,
     //   'Anchor' => 1,
     //   'Image' => 1,
	 //   'TextColor' => 1,
	 //   'BGColor' => 1,
     //   'Superscript' => 1,
     //   'Subscript' => 1,
     //   'Blockquote' => 1,
	    'Source' => 1,
        'HorizontalRule' => 1,
     //   'Cut' => 1,
     //   'Copy' => 1,
     //   'Paste' => 1,
	 //   'PasteText' => 1,
        'PasteFromWord' => 1,
	 //   'ShowBlocks' => 1,
     //   'RemoveFormat' => 1,
     //   'SpecialChar' => 1,
     //   'Format' => 1,
	 //   'Font' => 1,
	 //   'FontSize' => 1,
	 //   'Styles' => 1,
     //   'Table' => 1,
	 //   'SelectAll' => 1,
	 //   'Find' => 1,
	 //   'Replace' => 1,
	 //   'Flash' => 1,
	 //   'Smiley' => 1,
	 //   'CreateDiv' => 1,
	 //   'Iframe' => 1,
     //   'Maximize' => 1,
	 //   'SpellChecker' => 1,
	 //   'Scayt' => 1,
	 //   'About' => 1,
	 //   'break' => 1,
      ),
    ),
    'toolbar_loc' => 'top',
    'toolbar_align' => 'left',
    'path_loc' => 'bottom',
    'resizing' => 1,
    'verify_html' => 1,
    'preformatted' => 0,
    'convert_fonts_to_spans' => 1,
    'remove_linebreaks' => 1,
    'apply_source_formatting' => 0,
    'paste_auto_cleanup_on_paste' => 1,
    'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div',
    'css_setting' => 'theme',
    'css_path' => '',
    'css_classes' => '',
  );
  
  $full_html_fields = array(
    'format' => 'full_html',
    'editor' => 'ckeditor',
    'settings' => serialize($full_html_settings),
  );

  db_insert('wysiwyg')->fields($full_html_fields)->execute();
  
  
  $filtered_html_settings = array(
    'default' => 1,
    // 'user_choose' => 1,
    'show_toggle' => 1,
    // 'theme' => 'advanced',
    'language' => 'en',
    'buttons' => array(
      'default' => array(
        'Bold' => 1,
        'Italic' => 1,
     //   'Underline' => 1,
     //   'Strike' => 1,
     //   'JustifyLeft' => 1,
     //   'JustifyCenter' => 1,
     //   'JustifyRight' => 1,
	 //   'JustifyBlock' => 1,
        'BulletedList' => 1,
        'NumberedList' => 1,
	    'Outdent' => 1,
	    'Indent' => 1,
     //   'Undo' => 1,
     //   'Redo' => 1,
        'Link' => 1,
        'Unlink' => 1,
        'Anchor' => 1,
     //   'Image' => 1,
	 //   'TextColor' => 1,
	 //   'BGColor' => 1,
     //   'Superscript' => 1,
     //   'Subscript' => 1,
     //   'Blockquote' => 1,
	 //   'Source' => 1,
     //   'HorizontalRule' => 1,
     //   'Cut' => 1,
     //   'Copy' => 1,
     //   'Paste' => 1,
	 //   'PasteText' => 1,
        'PasteFromWord' => 1,
	 //   'ShowBlocks' => 1,
        'RemoveFormat' => 1,
     //   'SpecialChar' => 1,
     //   'Format' => 1,
	 //   'Font' => 1,
	 //   'FontSize' => 1,
	 //   'Styles' => 1,
        'Table' => 1,
	 //   'SelectAll' => 1,
	 //   'Find' => 1,
	 //   'Replace' => 1,
	 //   'Flash' => 1,
	 //   'Smiley' => 1,
	 //   'CreateDiv' => 1,
	 //   'Iframe' => 1,
     //   'Maximize' => 1,
	 //   'SpellChecker' => 1,
	 //   'Scayt' => 1,
	 //   'About' => 1,
	 //   'break' => 1,
      ),
    ),
    'toolbar_loc' => 'top',
    'toolbar_align' => 'left',
    'path_loc' => 'bottom',
    'resizing' => 1,
    'verify_html' => 1,
    'preformatted' => 0,
    'convert_fonts_to_spans' => 1,
    'remove_linebreaks' => 1,
    'apply_source_formatting' => 0,
    'paste_auto_cleanup_on_paste' => 1,
    'block_formats' => 'p,h2,h3,h4,h5',
    'css_setting' => 'theme',
    'css_path' => '',
    'css_classes' => '',
  );
  
  $filtered_html_fields = array(
    'format' => 'filtered_html',
    'editor' => 'ckeditor',
    'settings' => serialize($filtered_html_settings),
  );

  db_insert('wysiwyg')->fields($filtered_html_fields)->execute();
  
  // Configure default CAS settings
    variable_set('cas_version', '1.0');
	variable_set('cas_server', 'login.uiowa.edu');
	variable_set('cas_uri', '/uip');
	variable_set('cas_login_form', CAS_MAKE_DEFAULT);
	variable_set('cas_user_register', 0);
	variable_set('cas_hide_email', 1);
	variable_set('cas_hide_password', 1);
	variable_set('cas_first_login_destination', '<front>');
	variable_set('cas_login_invite', 'Log in using HawkID');
	variable_set('cas_login_drupal_invite', 'Cancel HawkID login');
	variable_set('cas_login_redir_message', 'You will be redirected to the secure HawkID login page.');
	variable_set('cas_login_message', 'Logged in via HawkID as %cas_username.');
	
  // Create custom date formats and format types
  
    $date_format_values = array(
      array(
        'format' => 'M d, Y',
        'type' => 'custom',
        'locked' => 0,
      ),
	  array(
        'format' => 'M',
        'type' => 'custom',
        'locked' => 0,
      ),
	  array(
        'format' => 'F',
        'type' => 'custom',
        'locked' => 0,
      ),
	  array(
        'format' => 'd',
        'type' => 'custom',
        'locked' => 0,
      ),
	);
	
	$query = db_insert('date_formats')->fields(array('format', 'type', 'locked'));
      foreach ($date_format_values as $date_format_values_record) {
        $query->values($date_format_values_record);
      }
      $query->execute();
	
	$date_format_type_values = array(
      array(
        'type' => 'month',
        'title' => 'Month',
        'locked' => 0,
      ),
	  array(
        'type' => 'short_month',
        'title' => 'Short Month',
        'locked' => 0,
      ),
	  array(
        'type' => 'day',
        'title' => 'Day',
        'locked' => 0,
      ),
	  array(
        'type' => 'event_date_type',
        'title' => 'Event Date Type',
        'locked' => 0,
      ),
	);
	
	$query = db_insert('date_format_type')->fields(array('type', 'title', 'locked'));
      foreach ($date_format_type_values as $date_format_record) {
        $query->values($date_format_record);
      }
      $query->execute();
	  
	variable_set('date_format_long','l, F j, Y - g:ia');
	variable_set('date_format_medium','D, m/d/Y - g:ia');
	variable_set('date_format_short','m/d/Y - g:ia');
	variable_set('date_format_day','d');
	variable_set('date_format_event_date_type','M d, Y');
	variable_set('date_format_month','F');
	variable_set('date_format_short_month','M');
}